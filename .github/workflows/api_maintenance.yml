name: API Maintenance & Keep-Alive

on:
  schedule:
    # Monthly aggregation - 1st day of every month at 10 PM UTC
    - cron: '0 22 1 * *'
    # Keep-alive ping - every 10 minutes to prevent hibernation
    - cron: '*/10 * * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    # Only run keep-alive if it's not the monthly aggregation time
    if: github.event.schedule != '0 22 1 * *'
    steps:
      - name: Keep API Alive
        env:
          API_URL: ${{ secrets.API_URL }}
        run: |
          echo "Pinging API to keep it alive..."
          # Try multiple endpoints to ensure the API stays warm
          curl -f -s -o /dev/null "$API_URL/" || echo "Root endpoint failed"
          curl -f -s -o /dev/null "$API_URL/docs" || echo "Docs endpoint failed"
          curl -f -s -o /dev/null "$API_URL/health" || echo "Health endpoint failed"
          echo "Keep-alive ping completed"

  monthly-aggregation:
    runs-on: ubuntu-latest
    # Only run aggregation on the 1st of the month
    if: github.event.schedule == '0 22 1 * *' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Ensure API is awake before aggregation
        env:
          API_URL: ${{ secrets.API_URL }}
        run: |
          echo "Warming up API before aggregation..."
          # Wait for API to wake up if hibernated
          for i in {1..6}; do
            if curl -f -s -o /dev/null "$API_URL/"; then
              echo "API is responding"
              break
            else
              echo "Attempt $i: API not responding, waiting 30 seconds..."
              sleep 30
            fi
          done

      - name: Trigger API Monthly Aggregation
        env:
          API_URL: ${{ secrets.API_URL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          echo "Triggering monthly aggregation..."
          response=$(curl -w "%{http_code}" -s -X POST \
            -H "X-API-Key: $API_KEY" \
            -H "Content-Type: application/json" \
            "$API_URL/api/aggregate-monthly")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          
          if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
            echo "Monthly aggregation completed successfully"
          else
            echo "Monthly aggregation failed"
            exit 1
          fi

  health-check:
    runs-on: ubuntu-latest
    # Run health check for manual triggers or if aggregation failed
    if: always() && (github.event_name == 'workflow_dispatch' || needs.monthly-aggregation.result == 'failure')
    needs: [monthly-aggregation]
    steps:
      - name: API Health Check
        env:
          API_URL: ${{ secrets.API_URL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          echo "Performing comprehensive health check..."
          
          # Check basic connectivity
          echo "Checking API connectivity..."
          curl -f -s -w "Status: %{http_code}, Time: %{time_total}s\n" "$API_URL/" || echo "Root endpoint failed"
          
          # Check docs endpoint
          echo "Checking documentation..."
          curl -f -s -w "Status: %{http_code}, Time: %{time_total}s\n" "$API_URL/docs" || echo "Docs endpoint failed"
          
          # Check articles endpoint (if exists)
          echo "Checking articles endpoint..."
          curl -f -s -w "Status: %{http_code}, Time: %{time_total}s\n" \
            -H "X-API-Key: $API_KEY" \
            "$API_URL/api/articles?limit=1" || echo "Articles endpoint failed"
          
          echo "Health check completed" 
